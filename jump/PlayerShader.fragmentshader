#version 330 core

// Ouput data
out vec3 color;

in vec3 Normal_cameraspace;
in vec3 LightDirection_cameraspace;
in vec3 Position_worldspace;
in vec3 EyeDirection_cameraspace;

uniform vec3 LightPosition_worldspace;

void main()
{
    vec3 n = normalize( Normal_cameraspace );
    vec3 l = normalize( LightDirection_cameraspace );

    float cosTheta = clamp( dot(n, l), 0, 1);

    vec3 MaterialDiffuseColor = vec3(0.910, 0.282, 0.333);
    vec3 LightColor = vec3(1, 1, 1);
    float LightPower = 50.f;

    vec3 MaterialAmbientColor = vec3(0.1,0.1,0.1) * MaterialDiffuseColor;
    vec3 MaterialSpecularColor = vec3(0.3,0.3,0.3);

    float distance = length( LightPosition_worldspace - Position_worldspace );

    // Eye vector (towards the camera)
	vec3 E = normalize(EyeDirection_cameraspace);
	// Direction in which the triangle reflects the light
	vec3 R = reflect(-l,n);
	// Cosine of the angle between the Eye vector and the Reflect vector,
	// clamped to 0
	//  - Looking into the reflection -> 1
	//  - Looking elsewhere -> < 1
	float cosAlpha = clamp( dot( E,R ), 0,1 );

	color = MaterialAmbientColor +
	        MaterialDiffuseColor * LightColor * LightPower * cosTheta / (distance*distance) +
	        MaterialSpecularColor * LightColor * LightPower * pow(cosAlpha,5) / (distance*distance);

}