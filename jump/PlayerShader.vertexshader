#version 330 core

// Input vertex data, different for all executions of this shader.
layout(location = 2) in vec3 vertexPosition_modelspace;
layout(location = 3) in vec3 vertexNormal_modelspace;

out vec3 Normal_cameraspace;
out vec3 LightDirection_cameraspace;
out vec3 Position_worldspace;
out vec3 EyeDirection_cameraspace;

uniform mat4 MpVP;
uniform mat4 Mp;
uniform mat4 V;
uniform vec3 LightPosition_worldspace;

void main(){

    gl_Position = MpVP * vec4(vertexPosition_modelspace, 1);

    // Position of the vertex, in worldspace : Mp * position
    Position_worldspace = (Mp * vec4(vertexPosition_modelspace,1)).xyz;

    // Vector that goes from the vertex to the camera, in camera space.
    // In camera space, the camera is at the origin (0,0,0).
    vec3 vertexPosition_cameraspace = ( V * Mp * vec4(vertexPosition_modelspace,1)).xyz;
    EyeDirection_cameraspace = vec3(0,0,0) - vertexPosition_cameraspace;

    // Vector that goes from the vertex to the light, in camera space. M is ommited because it's identity.
    vec3 LightPosition_cameraspace = ( V * vec4(LightPosition_worldspace,1)).xyz;
    LightDirection_cameraspace = LightPosition_cameraspace + EyeDirection_cameraspace;

    // Normal of the the vertex, in camera space
    Normal_cameraspace = ( V * Mp * vec4(vertexNormal_modelspace,0)).xyz;
}

